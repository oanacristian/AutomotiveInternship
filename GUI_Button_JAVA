import java.io.*;
import java.net.*;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;
import javax.swing.JTextField;

/**
 * This program demonstrates how to implement a UDP client program.
 *
 *
 * @author www.codejava.net
 */
import java.io.*;
import java.net.*;
import java.sql.Blob;

class QuoteClient
{
    //static String sentence = "";//= inFromUser.readLine();
    //private static Blob sentence;
    private static String sentence = "";
    public static void main(String args[]) throws Exception
    {

        QuoteClient client = new QuoteClient();

        //
        JFrame frame = new JFrame("Key Listener");

        Container contentPane = frame.getContentPane();

        KeyListener listener = new KeyListener() {
            @Override

            public void keyPressed(KeyEvent event) {

                printEventInfo("Key Pressed", event);

            }

            @Override

            public void keyReleased(KeyEvent event) {

                printEventInfo("Key Released", event);

            }

            @Override

            public void keyTyped(KeyEvent event) {

                printEventInfo("Key Typed", event);

            }

            private void printEventInfo(String str, KeyEvent e) {

                System.out.println(str);

                int code = e.getKeyCode();

                System.out.println("   Code: " + KeyEvent.getKeyText(code));

                System.out.println("   Char: " + e.getKeyChar());
                if(e.getKeyChar() == 'A' || e.getKeyChar() == 'a')
                {
                    client.conection('a');
                }
                if(e.getKeyChar() == 'D' || e.getKeyChar() == 'd')
                {
                    client.conection('d');
                }


                int mods = e.getModifiersEx();

                System.out.println("    Mods: "

                        + KeyEvent.getModifiersExText(mods));

                System.out.println("    Location: "

                        + keyboardLocation(e.getKeyLocation()));

                System.out.println("    Action? " + e.isActionKey());

            }

            private String keyboardLocation(int keybrd) {

                switch (keybrd) {

                    case KeyEvent.KEY_LOCATION_RIGHT:

                        return "Right";

                    case KeyEvent.KEY_LOCATION_LEFT:

                        return "Left";

                    case KeyEvent.KEY_LOCATION_NUMPAD:

                        return "NumPad";

                    case KeyEvent.KEY_LOCATION_STANDARD:

                        return "Standard";

                    case KeyEvent.KEY_LOCATION_UNKNOWN:

                    default:

                        return "Unknown";

                }

            }

        };

        JTextField textField = new JTextField();

        textField.addKeyListener(listener);

        contentPane.add(textField, BorderLayout.NORTH);

        frame.pack();

        frame.setVisible(true);
        //



        //

    }

    public void conection(char button){
        BufferedReader inFromUser =
                new BufferedReader(new InputStreamReader(System.in));
        DatagramSocket clientSocket = null;
        try {
            clientSocket = new DatagramSocket();
        } catch (SocketException e) {
            e.printStackTrace();
        }
        InetAddress IPAddress = null;
        try {
            IPAddress = InetAddress.getByName("192.168.4.1");
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        byte[] sendData = new byte[1024];
        byte[] receiveData = new byte[1024];
        //String sentence = null;
//            try {
        //sentence = inFromUser.readLine();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
        if(button == 'a'){
            sentence = "left";
        }
        if(button == 'd'){
            sentence = "rigt";
        }

        sendData = sentence.getBytes();
        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 2807);
        try {
            clientSocket.send(sendPacket);
        } catch (IOException e) {
            e.printStackTrace();
        }
        //DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        // clientSocket.receive(receivePacket);
        // String modifiedSentence = new String(receivePacket.getData());
        // System.out.println("FROM SERVER:" + modifiedSentence);
        clientSocket.close();
    }
}
